/**
 * School Payment System - Order Schema
 * Written by: Arpit Singh
 * EDVIRON Software Developer Assessment
 * 
 * This schema defines the structure for payment orders in MongoDB.
 * It stores basic order information and links to detailed payment status via OrderStatus.
 */

import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

// Type definition combining Order class with MongoDB Document
export type OrderDocument = Order & Document;

/**
 * Order Schema - MongoDB collection for storing payment orders
 * Contains basic order information including school, student, and payment details
 * Related to OrderStatus for detailed payment tracking
 */
@Schema({ timestamps: true }) // Automatically adds createdAt and updatedAt fields
export class Order {
  /**
   * School identifier from assessment credentials
   * Links the payment to a specific educational institution
   */
  @Prop({ required: true })
  school_id: string;

  /**
   * Trustee identifier for payment authorization
   * Used for payment gateway authentication
   */
  @Prop({ required: true })
  trustee_id: string;

  /**
   * Student information embedded document
   * Contains all student-related details for the payment
   */
  @Prop({
    type: {
      name: { type: String, required: true },    // Student's full name
      id: { type: String, required: true },      // Student's unique ID
      email: { type: String, required: true }    // Student's email address
    },
    required: true
  })
  student_info: {
    name: string;
    id: string;
    email: string;
  };

  /**
   * Payment gateway name
   * Identifies which payment gateway processed the transaction
   */
  @Prop({ required: true })
  gateway_name: string;

  /**
   * Custom order identifier
   * Unique order ID generated by our system for tracking
   */
  @Prop({ required: true, unique: true })
  custom_order_id: string;
}

// Create MongoDB schema from the Order class
export const OrderSchema = SchemaFactory.createForClass(Order);

// Create performance indexes for frequently queried fields
// These indexes improve query performance for large datasets
OrderSchema.index({ school_id: 1 });        // Index for school-specific queries
OrderSchema.index({ custom_order_id: 1 });  // Index for order lookup by custom ID